SynerJ('newTestButton')._bind('click', 'function (event) {\n    var factory = this.getProp(\'factory\');    \n    factory.call("new");\n}');
SynerJ('resetOutputs')._bind('click', 'function (event) {\n    var tests = this.getProp(\'tests\');\n    tests.call(\'reset\');\n}');
SynerJ('runTests')._bind('click', 'function (event) {\n    var tests = this.getProp(\'Tests\');\n    tests.call(\'run\');\n}');
SynerJ('startProto')._bind('click', 'function (event) {\n    // get test object\n    var test = this.getProp(\'test\');\n\n    // run test\n    test.call(\'run\');\n}');
SynerJ('SubTestNewButtonProto')._bind('click', 'function (event) {\n    var input = this.getProp(\'input\');\n    var text = input.val();\n\n    var test = this.getProp(\'test\');\n    test.call(\'newsubtest\', text);\n}');
SynerJ('Test1Li')._setProp('prototype', 'object:liProto');
SynerJ('Test1Li')._setProp('sublist', 'object:Test1Sublist');
SynerJ('Test1Button')._setProp('prototype', 'object:startProto');
SynerJ('Test1Button')._setProp('test', 'object:Test1');
SynerJ('Test1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test1-newSubTest')._setProp('prototype', 'object:SubTestNew');
SynerJ('Test1-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test1-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test1-newButton')._setProp('input', 'object:Test1-newInput');
SynerJ('Test1-newButton')._setProp('test', 'object:Test1');
SynerJ('Test1-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-0Li')._setProp('output', 'object:Test1-Output');
SynerJ('Test1-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-0Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-1Li')._setProp('output', 'object:Test1-1Output');
SynerJ('Test1-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-2Li')._setProp('output', 'object:Test1-2Output');
SynerJ('Test1-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-3Li')._setProp('output', 'object:Test1-3Output');
SynerJ('Test1-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-3Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-4Li')._setProp('output', 'object:Test1-4Output');
SynerJ('Test1-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-4Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test1-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test1-5Li')._setProp('output', 'object:Test1-5Output');
SynerJ('Test1-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test1-5Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2Li')._setProp('prototype', 'object:liProto');
SynerJ('Test2Li')._setProp('sublist', 'object:Test2Sublist');
SynerJ('Test2Button')._setProp('prototype', 'object:startProto');
SynerJ('Test2Button')._setProp('test', 'object:Test2');
SynerJ('Test2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test2-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test2-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test2-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test2-newButton')._setProp('input', 'object:Test2-newInput');
SynerJ('Test2-newButton')._setProp('test', 'object:Test2');
SynerJ('Test2-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-0Li')._setProp('output', 'object:Test2-0Output');
SynerJ('Test2-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-0Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-1Li')._setProp('output', 'object:Test2-1Output');
SynerJ('Test2-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-2Li')._setProp('output', 'object:Test2-2Output');
SynerJ('Test2-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-3Li')._setProp('output', 'object:Test2-3Output');
SynerJ('Test2-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-3Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-4Li')._setProp('output', 'object:Test2-4Output');
SynerJ('Test2-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-4Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test2-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test2-5Li')._setProp('output', 'object:Test2-5Output');
SynerJ('Test2-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test2-5Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3Li')._setProp('prototype', 'object:liProto');
SynerJ('Test3Li')._setProp('sublist', 'object:Test3Sublist');
SynerJ('Test3Button')._setProp('prototype', 'object:startProto');
SynerJ('Test3Button')._setProp('test', 'object:Test3');
SynerJ('Test3Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test3-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test3-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test3-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test3-newButton')._setProp('input', 'object:Test3-newInput');
SynerJ('Test3-newButton')._setProp('test', 'object:Test3');
SynerJ('Test3-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-0Li')._setProp('output', 'object:Test3-0Output');
SynerJ('Test3-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-0Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-1Li')._setProp('output', 'object:Test3-1Output');
SynerJ('Test3-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-2Li')._setProp('output', 'object:Test3-2Output');
SynerJ('Test3-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-3Li')._setProp('output', 'object:Test3-3Output');
SynerJ('Test3-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-3Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-4Li')._setProp('output', 'object:Test3-4Output');
SynerJ('Test3-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-4Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test3-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test3-5Li')._setProp('output', 'object:Test3-5Output');
SynerJ('Test3-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test3-5Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4Li')._setProp('prototype', 'object:liProto');
SynerJ('Test4Li')._setProp('sublist', 'object:Test4Sublist');
SynerJ('Test4Button')._setProp('prototype', 'object:startProto');
SynerJ('Test4Button')._setProp('test', 'object:Test4');
SynerJ('Test4Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test4-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test4-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test4-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test4-newButton')._setProp('input', 'object:Test4-newInput');
SynerJ('Test4-newButton')._setProp('test', 'object:Test4');
SynerJ('Test4-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-0Li')._setProp('output', 'object:Test4-0Output');
SynerJ('Test4-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-0Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-1Li')._setProp('output', 'object:Test4-1Output');
SynerJ('Test4-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-2Li')._setProp('output', 'object:Test4-2Output');
SynerJ('Test4-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-3Li')._setProp('output', 'object:Test4-3Output');
SynerJ('Test4-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-3Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-4Li')._setProp('output', 'object:Test4-4Output');
SynerJ('Test4-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-4Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test4-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test4-5Li')._setProp('output', 'object:Test4-5Output');
SynerJ('Test4-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test4-5Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test5Li')._setProp('prototype', 'object:liProto');
SynerJ('Test5Li')._setProp('sublist', 'object:Test5Sublist');
SynerJ('Test5Button')._setProp('prototype', 'object:startProto');
SynerJ('Test5Button')._setProp('test', 'object:Test5');
SynerJ('Test5Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test5Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test5-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test5-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test5-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test5-newButton')._setProp('input', 'object:Test5-newInput');
SynerJ('Test5-newButton')._setProp('test', 'object:Test5');
SynerJ('Test5-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-0Li')._setProp('output', 'object:Test5-0Output');
SynerJ('Test5-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-0Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test5-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-1Li')._setProp('output', 'object:Test5-1Output');
SynerJ('Test5-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-1Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test5-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-2Li')._setProp('output', 'object:Test5-2Output');
SynerJ('Test5-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-2Output')._setProp('prototype', 'object:succeedProto');
SynerJ('Test5-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-3Li')._setProp('output', 'object:Test5-3Output');
SynerJ('Test5-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-3Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test5-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-4Li')._setProp('output', 'object:Test5-4Output');
SynerJ('Test5-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-4Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test5-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-5Li')._setProp('output', 'object:Test5-5Output');
SynerJ('Test5-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-5Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test5-6Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test5-6Li')._setProp('output', 'object:Test5-6Output');
SynerJ('Test5-6Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test5-6Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6Li')._setProp('prototype', 'object:liProto');
SynerJ('Test6Li')._setProp('sublist', 'object:Test6Sublist');
SynerJ('Test6Button')._setProp('prototype', 'object:startProto');
SynerJ('Test6Button')._setProp('test', 'object:Test6');
SynerJ('Test6Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test6-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test6-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test6-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test6-newButton')._setProp('input', 'object:Test6-newInput');
SynerJ('Test6-newButton')._setProp('test', 'object:Test6');
SynerJ('Test6-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-0Li')._setProp('output', 'object:Test6-0Output');
SynerJ('Test6-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-0Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-1Li')._setProp('output', 'object:Test6-1Output');
SynerJ('Test6-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-1Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-2Li')._setProp('output', 'object:Test6-2Output');
SynerJ('Test6-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-2Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6-3Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-3Li')._setProp('output', 'object:Test6-3Output');
SynerJ('Test6-3Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-3Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6-4Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-4Li')._setProp('output', 'object:Test6-5Output');
SynerJ('Test6-4Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-4Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test6-5Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test6-5Li')._setProp('output', 'object:Test6-4Output');
SynerJ('Test6-5Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test6-5Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test7Li')._setProp('prototype', 'object:liProto');
SynerJ('Test7Li')._setProp('sublist', 'object:Test7Sublist');
SynerJ('Test7Button')._setProp('prototype', 'object:startProto');
SynerJ('Test7Button')._setProp('test', 'object:Test7');
SynerJ('Test7Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test7Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test7-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test7-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test7-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test7-newButton')._setProp('input', 'object:Test7-newInput');
SynerJ('Test7-newButton')._setProp('test', 'object:Test7');
SynerJ('Test7-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test7-0Li')._setProp('output', 'object:Test7-0Output');
SynerJ('Test7-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test7-0Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test7-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test7-1Li')._setProp('output', 'object:Test7-1Output');
SynerJ('Test7-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test7-1Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test7-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test7-2Li')._setProp('output', 'object:Test7-3Output');
SynerJ('Test7-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test7-2Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test8Li')._setProp('prototype', 'object:liProto');
SynerJ('Test8Li')._setProp('sublist', 'object:Test8Sublist');
SynerJ('Test8Button')._setProp('prototype', 'object:startProto');
SynerJ('Test8Button')._setProp('test', 'object:Test8');
SynerJ('Test8Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test8Sublist')._setProp('prototype', 'object:SubTestProto');
SynerJ('Test8-newSubTest')._setProp('prototype', 'object:SubTestNewProto');
SynerJ('Test8-newInput')._setProp('prototype', 'object:SubTestNewInputProto');
SynerJ('Test8-newButton')._setProp('prototype', 'object:SubTestNewButtonProto');
SynerJ('Test8-newButton')._setProp('input', 'object:Test8-newInput');
SynerJ('Test8-newButton')._setProp('test', 'object:Test8');
SynerJ('Test8-0Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test8-0Li')._setProp('output', 'object:Test8-0Output');
SynerJ('Test8-0Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test8-0Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test8-1Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test8-1Li')._setProp('output', 'object:Test8-1Output');
SynerJ('Test8-1Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test8-1Output')._setProp('prototype', 'object:waitingProto');
SynerJ('Test8-2Li')._setProp('prototype', 'object:SubTestLiProto');
SynerJ('Test8-2Li')._setProp('output', 'object:Test8-2Output');
SynerJ('Test8-2Tag')._setProp('prototype', 'object:SubTestTagProto');
SynerJ('Test8-2Output')._setProp('prototype', 'object:waitingProto');
SynerJ('actions')._setProp('prototype', 'object:liProto');
SynerJ('newTestButton')._setProp('name', 'Test2');
SynerJ('newTestButton')._setProp('factory', 'object:Tests');
SynerJ('resetOutputs')._setProp('tests', 'object:Tests');
SynerJ('runTests')._setProp('Tests', 'object:Tests');
SynerJ('liProto')._setProp('prototype', undefined);
SynerJ('startProto')._setProp('prototype', undefined);
SynerJ('outputProto')._setProp('failed', 'function (message) {\n    // set message\n    this.text("status: " + message);\n    \n    // set proto\n    var proto = this.getProp(\'failproto\');\n    this.setProp(\'prototype\', proto);\n}');
SynerJ('outputProto')._setProp('succeeded', 'function () {   \n     // set message\n    this.text("status: Succeeded");\n    \n    // set proto\n    var proto = this.getProp(\'succeedproto\');\n    this.setProp(\'prototype\', proto);\n}');
SynerJ('outputProto')._setProp('waiting', 'function () {   \n     // set message\n    this.text("status: none");\n    \n    // set proto\n    var proto = this.getProp(\'waitingproto\');\n    this.setProp(\'prototype\', proto);\n}');
SynerJ('outputProto')._setProp('failproto', 'object:failProto');
SynerJ('outputProto')._setProp('waitingproto', 'object:waitingProto');
SynerJ('outputProto')._setProp('succeedproto', 'object:succeedProto');
SynerJ('outputProto')._setProp('prototype', undefined);
SynerJ('succeedProto')._setProp('prototype', 'object:outputProto');
SynerJ('failProto')._setProp('prototype', 'object:outputProto');
SynerJ('waitingProto')._setProp('prototype', 'object:outputProto');
SynerJ('SubTestProto')._setProp('prototype', undefined);
SynerJ('SubTestTagProto')._setProp('prototype', undefined);
SynerJ('SubTestLiProto')._setProp('prototype', undefined);
SynerJ('SubTestNewProto')._setProp('prototype', 'object:liProto');
SynerJ('SubTestNewInputProto')._setProp('prototype', undefined);
SynerJ('SubTestNewButtonProto')._setProp('prototype', undefined);
SynerJ('TestProto')._setProp('failed', 'function failed(msg) {\n    msg = msg || this.getProp(\'msg\');\n    console.log(msg);\n    this.setProp(\'result\', false);\n    this.setProp(\'msg\', msg);\n}');
SynerJ('TestProto')._setProp('succeeded', 'function succeeded() {\n    this.setProp(\'result\', true);\n}');
SynerJ('TestProto')._setProp('newsubtest', 'function newsubtest(name) {\n    // create new id\n    var id = this.getProp("subtestid");\n    this.setProp("subtestid", id + 1);\n\n    // create li\n    var li = SynerJ.create({type: \'li\'});\n    li.id(this.id() + "-" + id + "Li");\n    li.setProp(\'prototype\', SynerJ(\'SubTestLiProto\'));\n    \n    // create name\n    var tag = SynerJ.create({type: \'p\'});\n    tag.id(this.id() + "-" + id + "Tag");\n    tag.text("Test " + this.id().slice(4) + "-" + id + ": " + name);\n    tag.setProp(\'prototype\', SynerJ(\'SubTestTagProto\'));\n\n    // create output\n    var p = SynerJ.create({type: \'p\'});\n    p.id(this.id() + "-" + id + "Output");\n    p.setProp(\'prototype\', SynerJ(\'outputProto\'));\n    li.setProp(\'output\', p);\n    p.call(\'waiting\');\n\n    // create test\n    var test = SynerJ.create({type: \'none\'});\n    test.id(this.id() + "-" + id);\n    test.setProp(\'dobject\', li);\n    test.setProp(\'run\', function () { return this.call(\'succeeded\'); });\n\n    test.setProp(\'output\', p);\n \n    test.setProp(\'prototype\', SynerJ(\'TestProto\'));\n    this.append(test);\n\n    // add to list\n    var list = this.getProp(\'dobject\').getProp(\'sublist\');\n    li.append(tag);\n    li.append(p);\n    list.append(li);\n}');
SynerJ('TestProto')._setProp('newrun', 'function () {\n    this.setProp(\'subtest\', 0);\n}');
SynerJ('TestProto')._setProp('waiting', 'function () {\n    var subtests = this.children();\n    \n    // set output for subtest\n    for(var i=0; i<subtests.length; i++) {\n        subtests[i].call(\'waiting\');\n    }\n    \n    // set output for test\n    var output = this.getProp(\'output\');\n    output.call(\'waiting\');\n}');
SynerJ('TestProto')._setProp('run', 'function run() {\n    var count = 0;\n    var i = 0;\n    this.call(\'newrun\');\n    var tests = this.children();\n    \n    function runtest() {\n        if (i<tests.length) {\n            var test = tests[i++];\n            try {\n                test.call(\'run\');\n            } catch (err) {\n                test.call(\'failed\', err);\n            }\n            var res = test.getProp(\'result\');\n            if (!res)\n                count++;\n            test.call(\'setoutput\');\n            setTimeout(runtest, 100);\n        }\n    }\n\n   runtest();\n   if (count === 0) {\n       this.call(\'succeeded\');\n   } else {\n       this.call(\'failed\', count + " failed");\n   }\n   this.call(\'setoutput\');\n}');
SynerJ('TestProto')._setProp('setoutput', 'function setoutput() {\n    var result = this.getProp(\'result\');\n    var output = this.getProp(\'output\');\n    if (result)\n        output.call(\'succeeded\');\n    else\n        output.call(\'failed\', this.getProp(\'msg\'));\n}');
SynerJ('TestProto')._setProp('subtest', 0);
SynerJ('TestProto')._setProp('prototype', undefined);
SynerJ('Tests')._setProp('reset', 'function reset() {\n    var tests = this.children();\n    for (var i=0; i<tests.length; i++) {\n        var test = tests[i];\n        console.log(test.id());\n        test.call(\'waiting\');\n    }\n}');
SynerJ('Tests')._setProp('new', 'function newtest() {\n    \n    var name = this.call(\'newid\');\n\n    this.setProp(\'name\', name);\n    var li = SynerJ.create({type: \'li\'});\n    li.id(name + "Li");\n    li.setProp(\'prototype\', SynerJ(\'liProto\'));\n\n    var btn = SynerJ.create({type: \'button\'});\n    btn.id(name + "Button");\n    btn.setProp(\'prototype\', SynerJ(\'startProto\'));\n    btn.text(name);\n\n    var output = SynerJ.create({type: \'p\'});\n    output.setProp(\'prototype\', SynerJ(\'outputProto\'));\n    output.call(\'waiting\');\n    output.id(name + "Output");\n\n    var sublist = SynerJ.create({type: \'ul\'});\n    sublist.id(name + "Sublist");\n    sublist.setProp(\'prototype\', SynerJ(\'SubTestProto\'));\n    li.setProp(\'sublist\', sublist);\n\n    li.append(btn);\n    li.append(output);\n    li.append(sublist);\n    SynerJ(\'actions\').before(li);\n\n    var test = SynerJ.create({type: \'none\'});\n    test.setProp(\'prototype\', SynerJ(\'TestProto\'));\n    test.setProp(\'output\', output);\n    test.setProp(\'dobject\', li);\n    test.setProp(\'subtestid\', 0);\n    test.id(name);\n    this.append(test);\n\n    this.call(\'addnewsubtest\', sublist, name, test);\n    btn.setProp(\'test\', test);\n}');
SynerJ('Tests')._setProp('newid', 'function () {\n    var id = this.getProp(\'id\');\n    this.setProp(\'id\', id + 1);\n    return "Test" + id;\n}');
SynerJ('Tests')._setProp('addnewsubtest', 'function (list, name, test) {\n    // create li\n    var li = SynerJ.create({type: \'li\'});\n    li.setProp(\'prototype\', SynerJ(\'SubTestNewProto\'));\n    li.id(name + "-newSubTest");\n\n    // create input\n    var input = SynerJ.create({type: \'input\'});\n    input.setProp(\'prototype\', SynerJ(\'SubTestNewInputProto\'));\n    input.id(name + "-newInput");\n\n    // create button\n    var button = SynerJ.create({type: \'button\'});\n    button.setProp(\'prototype\', SynerJ(\'SubTestNewButtonProto\'));\n    button.id(name + "-newButton");\n    button.text("Create New SubTest");\n    button.setProp(\'input\', input);\n    button.setProp(\'test\', test);\n\n    // add to list\n    li.append(input);\n    li.append(button);\n    list.append(li);\n}');
SynerJ('Tests')._setProp('name', 'Test8');
SynerJ('Tests')._setProp('id', 9);
SynerJ('Tests')._setProp('run', 'function run() {\n    var tests = this.children();\n    var i = 0;\n    function runtest() {\n        if (i<tests.length) {\n            var test = tests[i++];\n            try {\n                test.call(\'run\');\n            } catch(err) {\n                test.call(\'failed\', err);\n            }\n            setTimeout(runtest, 1000);\n        }\n    }\n    runtest();\n}');
SynerJ('Test1')._setProp('prototype', 'object:TestProto');
SynerJ('Test1')._setProp('output', 'object:Test1Output');
SynerJ('Test1')._setProp('dobject', 'object:Test1Li');
SynerJ('Test1')._setProp('subtestid', 6);
SynerJ('Test1')._setProp('subtest', 0);
SynerJ('Test1')._setProp('result', true);
SynerJ('Test1')._setProp('msg', '1 failed');
SynerJ('Test1-0')._setProp('run', 'function run() {\n    \n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check normal property\n    object.setProp(\'foo\', \'bar\');\n    var prop = object.getProp(\'foo\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-0')._setProp('dobject', 'object:Test1-0Li');
SynerJ('Test1-0')._setProp('output', 'object:Test1-0Output');
SynerJ('Test1-0')._setProp('result', true);
SynerJ('Test1-1')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check case sensitivity\n    object.setProp(\'FooBar\', \'bar\');\n    var prop = object.getProp(\'FooBar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-1')._setProp('dobject', 'object:Test1-1Li');
SynerJ('Test1-1')._setProp('output', 'object:Test1-1Output');
SynerJ('Test1-1')._setProp('result', true);
SynerJ('Test1-2')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check space exception\n    try {\n        object.setProp(\'foo bar\', \'bar\');\n        this.call(\'failed\', "No error thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-2')._setProp('dobject', 'object:Test1-2Tag');
SynerJ('Test1-2')._setProp('output', 'object:Test1-2Output');
SynerJ('Test1-2')._setProp('result', true);
SynerJ('Test1-3')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    object.setProp(\'foo-bar\', \'bar\');\n    var prop = object.getProp(\'foo-bar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-3')._setProp('dobject', 'object:Test1-3Li');
SynerJ('Test1-3')._setProp('output', 'object:Test1-3Output');
SynerJ('Test1-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-3')._setProp('result', true);
SynerJ('Test1-4')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check space exception\n    try {\n        object.setProp(\'foo bar\', \'bar\');\n        this.call(\'failed\', "No error thrown setting the property.");\n    } catch (err) {\n        try {\n            object.getProp(\'foo bar\', \'bar\');\n            this.call(\'failed\', "No error thrown getting the property.");\n        } catch (err) {\n            this.call(\'succeeded\');\n        }\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-4')._setProp('dobject', 'object:Test1-4Li');
SynerJ('Test1-4')._setProp('output', 'object:Test1-4Output');
SynerJ('Test1-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-4')._setProp('result', true);
SynerJ('Test1-4')._setProp('msg', 'No error thrown getting the property.');
SynerJ('Test1-5')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    object.setProp(\'foo_bar\', \'bar\');\n    var prop = object.getProp(\'foo_bar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test1-5')._setProp('dobject', 'object:Test1-5Li');
SynerJ('Test1-5')._setProp('output', 'object:Test1-5Output');
SynerJ('Test1-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test1-5')._setProp('result', true);
SynerJ('Test2')._setProp('prototype', 'object:TestProto');
SynerJ('Test2')._setProp('output', 'object:Test2Output');
SynerJ('Test2')._setProp('dobject', 'object:Test2Li');
SynerJ('Test2')._setProp('subtestid', 6);
SynerJ('Test2')._setProp('subtest', 0);
SynerJ('Test2')._setProp('result', true);
SynerJ('Test2')._setProp('msg', '1 failed');
SynerJ('Test2-0')._setProp('run', 'function run() {\n    \n    // create a Dobject\n    var object = SynerJ.create({type: \'div\'});\n\n    // check normal property\n    object.setProp(\'foo\', \'bar\');\n    var prop = object.getProp(\'foo\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-0')._setProp('dobject', 'object:Test2-0Li');
SynerJ('Test2-0')._setProp('output', 'object:Test2-0Output');
SynerJ('Test2-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-0')._setProp('subtest', 0);
SynerJ('Test2-0')._setProp('result', true);
SynerJ('Test2-1')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check case sensitivity\n    object.setProp(\'FooBar\', \'bar\');\n    var prop = object.getProp(\'FooBar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-1')._setProp('dobject', 'object:Test2-1Li');
SynerJ('Test2-1')._setProp('output', 'object:Test2-1Output');
SynerJ('Test2-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-1')._setProp('result', true);
SynerJ('Test2-2')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check space exception\n    try {\n        object.setProp(\'foo bar\', \'bar\');\n        this.call(\'failed\', "No error thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-2')._setProp('dobject', 'object:Test2-2Li');
SynerJ('Test2-2')._setProp('output', 'object:Test2-2Output');
SynerJ('Test2-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-2')._setProp('result', true);
SynerJ('Test2-3')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    object.setProp(\'foo-bar\', \'bar\');\n    var prop = object.getProp(\'foo-bar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-3')._setProp('dobject', 'object:Test2-3Li');
SynerJ('Test2-3')._setProp('output', 'object:Test2-3Output');
SynerJ('Test2-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-3')._setProp('result', true);
SynerJ('Test2-4')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check space exception\n    try {\n        object.setProp(\'foo bar\', \'bar\');\n        this.call(\'failed\', "No error thrown setting the property.");\n    } catch (err) {\n        try {\n            object.getProp(\'foo bar\', \'bar\');\n            this.call(\'failed\', "No error thrown getting the property.");\n        } catch (err) {\n            this.call(\'succeeded\');\n        }\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-4')._setProp('dobject', 'object:Test2-4Li');
SynerJ('Test2-4')._setProp('output', 'object:Test2-4Output');
SynerJ('Test2-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-4')._setProp('result', true);
SynerJ('Test2-4')._setProp('msg', 'No error thrown getting the property.');
SynerJ('Test2-5')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    object.setProp(\'foo_bar\', \'bar\');\n    var prop = object.getProp(\'foo_bar\');\n    if (prop != \'bar\') {\n        this.call(\'failed\', "Retrieved value isn\'t the same.");\n    } else {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test2-5')._setProp('dobject', 'object:Test2-5Li');
SynerJ('Test2-5')._setProp('output', 'object:Test2-5Output');
SynerJ('Test2-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test2-5')._setProp('result', true);
SynerJ('Test3')._setProp('prototype', 'object:TestProto');
SynerJ('Test3')._setProp('output', 'object:Test3Output');
SynerJ('Test3')._setProp('dobject', 'object:Test3Li');
SynerJ('Test3')._setProp('subtestid', 7);
SynerJ('Test3')._setProp('subtest', 0);
SynerJ('Test3')._setProp('result', true);
SynerJ('Test3-0')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    try {\n        object.id(\'foo\');\n        if (object.id() === \'foo\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test3-0')._setProp('dobject', 'object:Test3-0Li');
SynerJ('Test3-0')._setProp('output', 'object:Test3-0Output');
SynerJ('Test3-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-0')._setProp('result', true);
SynerJ('Test3-1')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    try {\n        object.id(\'FooBar\');\n        if (object.id() === \'FooBar\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to FooBar failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test3-1')._setProp('dobject', 'object:Test3-1Li');
SynerJ('Test3-1')._setProp('output', 'object:Test3-1Output');
SynerJ('Test3-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-1')._setProp('result', true);
SynerJ('Test3-2')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    try {\n        object.id(\'foo-2\');\n        if (object.id() === \'foo-2\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test3-2')._setProp('dobject', 'object:Test3-2Li');
SynerJ('Test3-2')._setProp('output', 'object:Test3-2Output');
SynerJ('Test3-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-2')._setProp('result', true);
SynerJ('Test3-3')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    try {\n        object.id(\'foo_2\');\n        if (object.id() === \'foo_2\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test3-3')._setProp('dobject', 'object:Test3-3Li');
SynerJ('Test3-3')._setProp('output', 'object:Test3-3Output');
SynerJ('Test3-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-3')._setProp('result', true);
SynerJ('Test3-4')._setProp('run', 'function run() {\n\n    // create 2 objects\n    var object = SynerJ.create({type: \'none\'});\n    var object2 = SynerJ.create({type: \'none\'});\n\n    // give them the same id\n    object.id(\'foo\');\n    \n    try {\n        object2.id(\'foo\');\n        this.call(\'failed\', "No error was thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(object.id());\n    SynerJ.delete(object2.id());\n\n}');
SynerJ('Test3-4')._setProp('dobject', 'object:Test3-4Li');
SynerJ('Test3-4')._setProp('output', 'object:Test3-4Output');
SynerJ('Test3-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-4')._setProp('result', true);
SynerJ('Test3-5')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    try {\n        object.id(\'foo bar\');\n        this.call(\'failed\', "Setting the id to foo failed.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test3-5')._setProp('dobject', 'object:Test3-5Li');
SynerJ('Test3-5')._setProp('output', 'object:Test3-5Output');
SynerJ('Test3-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test3-5')._setProp('result', true);
SynerJ('Test4')._setProp('prototype', 'object:TestProto');
SynerJ('Test4')._setProp('output', 'object:Test4Output');
SynerJ('Test4')._setProp('dobject', 'object:Test4Li');
SynerJ('Test4')._setProp('subtestid', 6);
SynerJ('Test4')._setProp('subtest', 0);
SynerJ('Test4')._setProp('result', true);
SynerJ('Test4-0')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    try {\n        object.id(\'foo\');\n        if (object.id() === \'foo\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test4-0')._setProp('dobject', 'object:Test4-0Li');
SynerJ('Test4-0')._setProp('output', 'object:Test4-0Output');
SynerJ('Test4-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-0')._setProp('result', true);
SynerJ('Test4-1')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    try {\n        object.id(\'FooBar\');\n        if (object.id() === \'FooBar\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to FooBar failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test4-1')._setProp('dobject', 'object:Test4-1Li');
SynerJ('Test4-1')._setProp('output', 'object:Test4-1Output');
SynerJ('Test4-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-1')._setProp('result', true);
SynerJ('Test4-2')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    try {\n        object.id(\'foo-2\');\n        if (object.id() === \'foo-2\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test4-2')._setProp('dobject', 'object:Test4-2Li');
SynerJ('Test4-2')._setProp('output', 'object:Test4-2Output');
SynerJ('Test4-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-2')._setProp('result', true);
SynerJ('Test4-3')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    try {\n        object.id(\'foo_2\');\n        if (object.id() === \'foo_2\') {\n            this.call(\'succeeded\');\n        } else {\n            this.call(\'failed\', "Setting the id to foo failed.");\n        }\n    } catch (err) {\n        this.call(\'failed\', "Setting the property resulted in an error.");\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test4-3')._setProp('dobject', 'object:Test4-3Li');
SynerJ('Test4-3')._setProp('output', 'object:Test4-3Output');
SynerJ('Test4-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-3')._setProp('result', true);
SynerJ('Test4-4')._setProp('run', 'function run() {\n\n    // create 2 objects\n    var object = SynerJ.create({type: \'div\'});\n    var object2 = SynerJ.create({type: \'div\'});\n\n    // give them the same id\n    object.id(\'foo\');\n    \n    try {\n        object2.id(\'foo\');\n        this.call(\'failed\', "No error was thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(object.id());\n    SynerJ.delete(object2.id());\n\n}');
SynerJ('Test4-4')._setProp('dobject', 'object:Test4-4Li');
SynerJ('Test4-4')._setProp('output', 'object:Test4-4Output');
SynerJ('Test4-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-4')._setProp('result', true);
SynerJ('Test4-5')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'div\'});\n\n    // check property\n    try {\n        object.id(\'foo bar\');\n        this.call(\'failed\', "Setting the id to foo failed.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test4-5')._setProp('dobject', 'object:Test4-5Li');
SynerJ('Test4-5')._setProp('output', 'object:Test4-5Output');
SynerJ('Test4-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test4-5')._setProp('result', true);
SynerJ('Test5')._setProp('prototype', 'object:TestProto');
SynerJ('Test5')._setProp('output', 'object:Test5Output');
SynerJ('Test5')._setProp('dobject', 'object:Test5Li');
SynerJ('Test5')._setProp('subtestid', 7);
SynerJ('Test5')._setProp('subtest', 0);
SynerJ('Test5')._setProp('result', true);
SynerJ('Test5-0')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    object.setProp(\'foo\', \'test\');\n    var val = object.getProp(\'foo\');\n    if (typeof val === \'string\' && val === \'test\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Setting a string didn\'t result in the same string.");\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test5-0')._setProp('dobject', 'object:Test5-0Li');
SynerJ('Test5-0')._setProp('output', 'object:Test5-0Output');
SynerJ('Test5-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-0')._setProp('result', true);
SynerJ('Test5-1')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check property\n    object.setProp(\'foo\', 666);\n    var val = object.getProp(\'foo\');\n    if (typeof val === \'number\' && val === 666)\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Setting a number didn\'t result in the same number.");\n\n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test5-1')._setProp('dobject', 'object:Test5-1Li');
SynerJ('Test5-1')._setProp('output', 'object:Test5-1Output');
SynerJ('Test5-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-1')._setProp('result', true);
SynerJ('Test5-2')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n\n    // check true \n    object.setProp(\'foo\', true);\n    var val = object.getProp(\'foo\');\n    if (typeof val === \'boolean\' && val === true)\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Setting true didn\'t result in the boolean true.");\n\n    // check false\n    object.setProp(\'bar\', false);\n    val = object.getProp(\'bar\');\n    if (typeof val === \'boolean\' && val === false)\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Setting false didn\'t result in the boolean false.");\n        \n    // remove the object\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test5-2')._setProp('dobject', 'object:Test5-2Li');
SynerJ('Test5-2')._setProp('output', 'object:Test5-2Output');
SynerJ('Test5-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-2')._setProp('result', true);
SynerJ('Test5-3')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n    var object2 = SynerJ.create({type: \'none\'});\n\n    // check true \n    object.setProp(\'foo\', object2);\n    var val = object.getProp(\'foo\');\n    if (val.equals(object2))\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The returned object isn\'t the same.");\n\n    // remove the objects\n    SynerJ.delete(object.id());\n    SynerJ.delete(object2.id());\n\n}');
SynerJ('Test5-3')._setProp('dobject', 'object:Test5-3Li');
SynerJ('Test5-3')._setProp('output', 'object:Test5-3Output');
SynerJ('Test5-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-3')._setProp('result', true);
SynerJ('Test5-4')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n    var object2 = SynerJ.create({type: \'none\'});\n    \n    // create array\n    var ar = [\'foo\', 2, true, object2];\n\n    // set array property\n    try {\n        object.setProp(\'foo\', ar);\n        this.call(\'failed\', "Setting an array should result in an error.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(object.id());\n    SynerJ.delete(object2.id());\n\n}');
SynerJ('Test5-4')._setProp('dobject', 'object:Test5-4Li');
SynerJ('Test5-4')._setProp('output', 'object:Test5-4Output');
SynerJ('Test5-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-4')._setProp('result', true);
SynerJ('Test5-4')._setProp('msg', 'Cannot assign normal objects as properties: foo,2,true,object:Dobject-3100');
SynerJ('Test5-5')._setProp('dobject', 'object:Test5-5Li');
SynerJ('Test5-5')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n    var object2 = SynerJ.create({type: \'none\'});\n\n    // get object \n    object.setProp(\'foo\', object2);\n    var val1 = object.getProp(\'foo\');\n    \n    // change id\n    object2.id(\'foobar\');\n    \n    // get object after id change\n    var val2 = object.getProp(\'foo\');\n    \n    // compare\n    if (val1.equals(val2))\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The returned object isn\'t the same.");\n\n    // remove the objects\n    SynerJ.delete(object.id());\n    SynerJ.delete(object2.id());\n\n}');
SynerJ('Test5-5')._setProp('output', 'object:Test5-5Output');
SynerJ('Test5-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-5')._setProp('result', true);
SynerJ('Test5-6')._setProp('dobject', 'object:Test5-6Li');
SynerJ('Test5-6')._setProp('run', 'function run() {\n\n    // create a normal object\n    var object = SynerJ.create({type: \'none\'});\n    var object2 = SynerJ.create({type: \'none\'});\n\n    // get object \n    object.setProp(\'foo\', object2);\n    var val1 = object.getProp(\'foo\');\n    \n    // remove object\n    SynerJ.delete(object2.id());\n    \n    // get object after removal\n    var val2 = object.getProp(\'foo\');\n    \n    // compare\n    if (typeof val2 != \'undefined\')\n        this.call(\'failed\', "Expected undefined, given: " + val2);\n    else\n        this.call(\'succeeded\');\n\n    // remove the objects\n    SynerJ.delete(object.id());\n\n}');
SynerJ('Test5-6')._setProp('output', 'object:Test5-6Output');
SynerJ('Test5-6')._setProp('prototype', 'object:TestProto');
SynerJ('Test5-6')._setProp('result', true);
SynerJ('Test5-6')._setProp('msg', 'Expected undefined, given: undefined');
SynerJ('Test6')._setProp('prototype', 'object:TestProto');
SynerJ('Test6')._setProp('output', 'object:Test6Output');
SynerJ('Test6')._setProp('dobject', 'object:Test6Li');
SynerJ('Test6')._setProp('subtestid', 6);
SynerJ('Test6')._setProp('subtest', 0);
SynerJ('Test6')._setProp('result', true);
SynerJ('Test6')._setProp('msg', '1 failed');
SynerJ('Test6-0')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // set parent property\n    parent.setProp(\'foo\', \'bar\');\n\n    // get property through chain\n    var val = child.getProp(\'foo\');\n    \n    if (val === \'bar\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Unable to retrieve the value through the chain.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test6-0')._setProp('dobject', 'object:Test6-0Li');
SynerJ('Test6-0')._setProp('output', 'object:Test6-0Output');
SynerJ('Test6-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-0')._setProp('result', true);
SynerJ('Test6-1')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    var parent2 = SynerJ.create({type: \'none\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    parent.setProp(\'prototype\', parent2);\n    \n    // set parent property\n    parent2.setProp(\'foo\', \'bar\');\n\n    // get property through chain\n    var val = child.getProp(\'foo\');\n    \n    if (val === \'bar\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Unable to retrieve the value through the chain.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n    SynerJ.delete(parent2.id());\n\n}');
SynerJ('Test6-1')._setProp('dobject', 'object:Test6-1Li');
SynerJ('Test6-1')._setProp('output', 'object:Test6-1Output');
SynerJ('Test6-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-1')._setProp('result', true);
SynerJ('Test6-2')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // set properties\n    parent.setProp(\'foo\', \'bar\');\n    child.setProp(\'foo\', \'foo\');\n\n    // get overriden property\n    var val = child.getProp(\'foo\');\n    if (val == \'foo\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The retrieved value isn\'t the overridden one.");\n\n    // remove property and retrieve again\n    child.removeProp(\'foo\');\n    val = child.getProp(\'foo\');\n    if (val === \'bar\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "Property was not found in the chain after deleting own.");\n        \n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test6-2')._setProp('dobject', 'object:Test6-2Li');
SynerJ('Test6-2')._setProp('output', 'object:Test6-2Output');
SynerJ('Test6-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-2')._setProp('result', true);
SynerJ('Test6-3')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    try {\n        // set up cyclic prototype chain\n        child.setProp(\'prototype\', parent);\n        parent.setProp(\'prototype\', child);\n        this.call(\'failed\', "No error was thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test6-3')._setProp('dobject', 'object:Test6-3Li');
SynerJ('Test6-3')._setProp('output', 'object:Test6-3Output');
SynerJ('Test6-3')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-3')._setProp('result', true);
SynerJ('Test6-4')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    try {\n        // set up cyclic prototype chain\n        child.setProp(\'prototype\', parent);\n        parent.setProp(\'prototype\', child);\n        this.call(\'failed\', "No error was thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test6-4')._setProp('dobject', 'object:Test6-4Li');
SynerJ('Test6-4')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-4')._setProp('output', 'object:Test6-4Output');
SynerJ('Test6-4')._setProp('result', true);
SynerJ('Test6-5')._setProp('dobject', 'object:Test6-5Li');
SynerJ('Test6-5')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    var bastard = SynerJ.create({type: \'none\'});\n    var parent2 = SynerJ.create({type: \'none\'});\n    \n    try {\n        // set up cyclic prototype chain\n        child.setProp(\'prototype\', parent);\n        bastard.setProp(\'prototype\', parent);\n        parent.setProp(\'prototype\', parent2);\n        parent2.setProp(\'prototype\', child);\n        \n        this.call(\'failed\', "No error was thrown.");\n    } catch (err) {\n        this.call(\'succeeded\');\n    }\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n    SynerJ.delete(bastard.id());\n    SynerJ.delete(parent2.id());\n\n}');
SynerJ('Test6-5')._setProp('output', 'object:Test6-5Output');
SynerJ('Test6-5')._setProp('prototype', 'object:TestProto');
SynerJ('Test6-5')._setProp('result', true);
SynerJ('Test7')._setProp('prototype', 'object:TestProto');
SynerJ('Test7')._setProp('output', 'object:Test7Output');
SynerJ('Test7')._setProp('dobject', 'object:Test7Li');
SynerJ('Test7')._setProp('subtestid', 5);
SynerJ('Test7')._setProp('subtest', 0);
SynerJ('Test7')._setProp('result', true);
SynerJ('Test7')._setProp('msg', '1 failed');
SynerJ('Test7-0')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n\n    // set handler for parent\n    parent.bind(\'foo\', function (e) {\n        this.setProp(\'foo\', \'bar\');\n    });\n    \n    // trigger on child\n    child.trigger(\'foo\');\n    var val = child.getProp(\'foo\');\n    if (val == \'bar\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The property set by the handler, was not found in the child object.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test7-0')._setProp('dobject', 'object:Test7-0Li');
SynerJ('Test7-0')._setProp('output', 'object:Test7-0Output');
SynerJ('Test7-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test7-0')._setProp('result', true);
SynerJ('Test7-0')._setProp('msg', 'The property set by the handler, was not found in the child object.');
SynerJ('Test7-1')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    // set handler for parent\n    parent.bind(\'foo\', function (e) {\n        this.setProp(\'foo\', \'bar\');\n    });\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // trigger on child\n    child.trigger(\'foo\');\n    var val = child.getProp(\'foo\');\n    if (val == \'bar\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The property set by the handler, was not found in the child object.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test7-1')._setProp('dobject', 'object:Test7-1Li');
SynerJ('Test7-1')._setProp('output', 'object:Test7-1Output');
SynerJ('Test7-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test7-1')._setProp('result', true);
SynerJ('Test7-1')._setProp('msg', 'Error was thrown while calling the method.');
SynerJ('Test7-2')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'none\'});\n    var parent = SynerJ.create({type: \'none\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // set handler for parent\n    parent.bind(\'foo\', function (e) {\n        this.setProp(\'foo\', \'bar\');\n    });\n    \n    // \'override\' event for child\n    child.bind(\'foo\', function (e) {\n        this.setProp(\'foo\', \'foo\');\n    });\n        \n    // trigger on child\n    try {\n        child.trigger(\'foo\');\n        var val = child.getProp(\'foo\');\n        if (val == \'foo\')\n            this.call(\'succeeded\');\n        else\n            this.call(\'failed\', "The event was not overridden.");\n    } catch (err) {\n        this.call(\'failed\', "Triggering the event threw an error.");\n    }\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test7-2')._setProp('dobject', 'object:Test7-2Li');
SynerJ('Test7-2')._setProp('output', 'object:Test7-2Output');
SynerJ('Test7-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test7-2')._setProp('result', true);
SynerJ('Test8')._setProp('prototype', 'object:TestProto');
SynerJ('Test8')._setProp('output', 'object:Test8Output');
SynerJ('Test8')._setProp('dobject', 'object:Test8Li');
SynerJ('Test8')._setProp('subtestid', 3);
SynerJ('Test8')._setProp('subtest', 0);
SynerJ('Test8')._setProp('result', true);
SynerJ('Test8')._setProp('msg', '1 failed');
SynerJ('Test8-0')._setProp('dobject', 'object:Test8-0Li');
SynerJ('Test8-0')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'div\'});\n    var parent = SynerJ.create({type: \'div\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // set style for parent\n    parent.setCss(\'width\', \'200px\');\n        \n    // get style for child\n    var val = child.getCss(\'width\');\n    if (val == \'200px\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The style was not inherited.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test8-0')._setProp('output', 'object:Test8-0Output');
SynerJ('Test8-0')._setProp('prototype', 'object:TestProto');
SynerJ('Test8-0')._setProp('result', true);
SynerJ('Test8-1')._setProp('dobject', 'object:Test8-1Li');
SynerJ('Test8-1')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'div\'});\n    var parent = SynerJ.create({type: \'div\'});\n    var parent2 = SynerJ.create({type: \'div\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    parent.setProp(\'prototype\', parent2);\n    \n    // set style for parent\n    parent2.setCss(\'width\', \'200px\');\n        \n    // get style for child\n    var val = child.getCss(\'width\');\n    \n    if (val == \'200px\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The style was not inherited.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n    SynerJ.delete(parent2.id());\n\n}');
SynerJ('Test8-1')._setProp('output', 'object:Test8-1Output');
SynerJ('Test8-1')._setProp('prototype', 'object:TestProto');
SynerJ('Test8-1')._setProp('result', true);
SynerJ('Test8-1')._setProp('msg', 'The style was not inherited.');
SynerJ('Test8-1')._setProp('val', '200px');
SynerJ('Test8-2')._setProp('dobject', 'object:Test8-2Li');
SynerJ('Test8-2')._setProp('run', 'function run() {\n\n    // create objects\n    var child = SynerJ.create({type: \'div\'});\n    var parent = SynerJ.create({type: \'div\'});\n    \n    // set up chain\n    child.setProp(\'prototype\', parent);\n    \n    // set style for parent\n    parent.setCss(\'width\', \'200px\');\n    \n    // override for child\n    child.setCss(\'width\', \'400px\');\n    \n    // remove overridden value\n    child.removeCss(\'width\');\n        \n    // get style for child\n    var val = child.getCss(\'width\');\n\n    if (val == \'200px\')\n        this.call(\'succeeded\');\n    else\n        this.call(\'failed\', "The style was not properly inherited. Returned: " + val + ", 200px expected.");\n\n    // remove the objects\n    SynerJ.delete(child.id());\n    SynerJ.delete(parent.id());\n\n}');
SynerJ('Test8-2')._setProp('output', 'object:Test8-2Output');
SynerJ('Test8-2')._setProp('prototype', 'object:TestProto');
SynerJ('Test8-2')._setProp('result', true);
SynerJ('Test8-2')._setProp('msg', 'The style was not properly inherited. Returned: , 200px expected.');
